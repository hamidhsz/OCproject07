{"ast":null,"code":"import axios from \"axios\";\nimport { getJwtToken } from \"@/utils\";\nexport default {\n  data() {\n    return {\n      user: null,\n      postTitle: \"\",\n      postContent: \"\",\n      posts: [] // Added to hold the user's posts\n    };\n  },\n\n  async created() {\n    const userId = localStorage.getItem(\"user\");\n    if (userId) {\n      const response = await axios.get(`/users/${userId}`);\n      this.user = response.data;\n      this.fetchUserPosts(); // Fetch posts after getting user data\n    }\n  },\n\n  methods: {\n    async fetchUserPosts() {\n      const jwtToken = getJwtToken();\n      try {\n        const response = await axios.get(`http://localhost:8081/posts/user/${this.user.id}`, {\n          headers: {\n            Authorization: `Bearer ${jwtToken}`\n          }\n        });\n        this.posts = response.data;\n      } catch (error) {\n        console.error(\"Error fetching user posts:\", error);\n      }\n    },\n    async submitPost() {\n      const jwtToken = getJwtToken();\n      await axios.post(\"http://localhost:8081/posts\", {\n        title: this.postTitle,\n        content: this.postContent,\n        jwtToken: jwtToken\n      });\n      this.postTitle = \"\";\n      this.postContent = \"\";\n      this.fetchUserPosts(); // Refresh the list of posts after submitting\n    },\n\n    logout() {\n      // Implement logout functionality\n    }\n  }\n};","map":{"version":3,"names":["axios","getJwtToken","data","user","postTitle","postContent","posts","created","userId","localStorage","getItem","response","get","fetchUserPosts","methods","jwtToken","id","headers","Authorization","error","console","submitPost","post","title","content","logout"],"sources":["/Users/Hamid/Coding/OC/Project07/Aug07 - sqlite/OCproject07/frontend/src/views/UserProfilePage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>User Profile</h1>\n    <div v-if=\"user\">\n      <p><strong>Email:</strong> {{ user.email }}</p>\n    </div>\n    <button @click=\"logout\">Logout</button>\n\n    <!-- Blog Post Form -->\n    <div class=\"blog-post-form\">\n      <h2>Post a Blog</h2>\n      <form @submit.prevent=\"submitPost\">\n        <label for=\"title\">Title:</label>\n        <input id=\"title\" v-model=\"postTitle\" type=\"text\" required />\n\n        <label for=\"content\">Content:</label>\n        <textarea id=\"content\" v-model=\"postContent\" required></textarea>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n\n    <!-- User's Posts -->\n    <div class=\"user-posts\">\n      <h2>Your Posts</h2>\n      <ul>\n        <li v-for=\"post in posts\" :key=\"post.id\">\n          <h3>{{ post.title }}</h3>\n          <p>{{ post.content }}</p>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { getJwtToken } from \"@/utils\";\n\nexport default {\n  data() {\n    return {\n      user: null,\n      postTitle: \"\",\n      postContent: \"\",\n      posts: [], // Added to hold the user's posts\n    };\n  },\n  async created() {\n    const userId = localStorage.getItem(\"user\");\n    if (userId) {\n      const response = await axios.get(`/users/${userId}`);\n      this.user = response.data;\n      this.fetchUserPosts(); // Fetch posts after getting user data\n    }\n  },\n  methods: {\n    async fetchUserPosts() {\n      const jwtToken = getJwtToken();\n      try {\n        const response = await axios.get(`http://localhost:8081/posts/user/${this.user.id}`, {\n          headers: {\n            Authorization: `Bearer ${jwtToken}`\n          }\n        });\n        this.posts = response.data;\n      } catch (error) {\n        console.error(\"Error fetching user posts:\", error);\n      }\n    },\n    async submitPost() {\n      const jwtToken = getJwtToken();\n      await axios.post(\"http://localhost:8081/posts\", {\n        title: this.postTitle,\n        content: this.postContent,\n        jwtToken: jwtToken,\n      });\n      this.postTitle = \"\";\n      this.postContent = \"\";\n      this.fetchUserPosts(); // Refresh the list of posts after submitting\n    },\n    logout() {\n      // Implement logout functionality\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* ... existing styles ... */\n\n.user-posts {\n  margin-top: 20px;\n}\n\n.user-posts h2 {\n  text-align: center;\n}\n\n.user-posts ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.user-posts li {\n  border: 1px solid #ccc;\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 5px;\n}\n</style>"],"mappings":"AAoCA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,WAAU,QAAS,SAAS;AAErC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE,CAAE;IACb,CAAC;EACH,CAAC;;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC3C,IAAIF,MAAM,EAAE;MACV,MAAMG,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAE,UAASJ,MAAO,EAAC,CAAC;MACpD,IAAI,CAACL,IAAG,GAAIQ,QAAQ,CAACT,IAAI;MACzB,IAAI,CAACW,cAAc,CAAC,CAAC,EAAE;IACzB;EACF,CAAC;;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,MAAME,QAAO,GAAId,WAAW,CAAC,CAAC;MAC9B,IAAI;QACF,MAAMU,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAE,oCAAmC,IAAI,CAACT,IAAI,CAACa,EAAG,EAAC,EAAE;UACnFC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASH,QAAS;UACpC;QACF,CAAC,CAAC;QACF,IAAI,CAACT,KAAI,GAAIK,QAAQ,CAACT,IAAI;MAC5B,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACjB,MAAMN,QAAO,GAAId,WAAW,CAAC,CAAC;MAC9B,MAAMD,KAAK,CAACsB,IAAI,CAAC,6BAA6B,EAAE;QAC9CC,KAAK,EAAE,IAAI,CAACnB,SAAS;QACrBoB,OAAO,EAAE,IAAI,CAACnB,WAAW;QACzBU,QAAQ,EAAEA;MACZ,CAAC,CAAC;MACF,IAAI,CAACX,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACC,WAAU,GAAI,EAAE;MACrB,IAAI,CAACQ,cAAc,CAAC,CAAC,EAAE;IACzB,CAAC;;IACDY,MAAMA,CAAA,EAAG;MACP;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}